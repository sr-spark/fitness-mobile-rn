/* eslint-disable react-native/no-inline-styles */
import React, {Fragment, Component} from 'react';
import {
  Alert,
  Image,
  Keyboard,
  StyleSheet,
  ScrollView,
  TouchableWithoutFeedback,
  KeyboardAvoidingView,
  View,
  Platform,
  Text,
  StatusBar,
} from 'react-native';
import AsyncStorage from '@react-native-community/async-storage';
import FormTextInput from '../components/FormTextInput';
import Button from '../components/Button';
import ConfigData from './config';
import PushNotificationIOS from '@react-native-community/push-notification-ios';

const PushNotification = Platform.select({
  ios: () => require('@react-native-community/push-notification-ios'),
  android: () => require('react-native-push-notification'),
})();

export default class LoginScreen extends Component {
  state = {
    email: '',
    password: '',
    loginButtonDisabled: false,
  };

  handleEmailChange = email => {
    this.setState({email: email});
  };

  handlePasswordChange = password => {
    this.setState({password: password});
  };

  emailCorrect = email => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  componentDidMount() {
    AsyncStorage.getItem('login_email', (_err, email) => {
      this.setState({email});
    });
    AsyncStorage.getItem('login_password', (_err, password) => {
      this.setState({password});
    });

    if (global.initialLoading) {
      global.initialLoading = false;
      this.props.navigation.navigate('Main', {name: 'OK'});
    }

    let count = 0;
    let loadingInterval = setInterval(() => {
      if (global.initialLoading) {
        global.initialLoading = false;
        this.props.navigation.navigate('Main', {name: 'OK'});
      }
      count++;
      if (count >= 200) {
        clearInterval(loadingInterval);
      }
    }, 10);

    if (Platform.OS === 'ios') {
      console.log('Push notification');
      PushNotificationIOS.cancelAllLocalNotifications();
    } else {
      PushNotification.localNotification({
        /* Android Only Properties */
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: 'My Notification Ticker', // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
        smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
        subText: 'This is a subText', // (optional) default: none
        color: 'red', // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: 'group', // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: 'high', // (optional) set notification priority, default: high
        visibility: 'private', // (optional) set notification visibility, default: private
        importance: 'high', // (optional) set notification importance, default: high

        /* iOS only properties */
        alertAction: 'view', // (optional) default: view
        category: '', // (optional) default: null
        userInfo: {}, // (optional) default: null (object containing additional notification data)

        /* iOS and Android properties */
        title: 'My Notification Title', // (optional)
        message: 'My Notification Message', // (required)
        playSound: false, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      });
    }
  }

  render() {
    return (
      <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
        <KeyboardAvoidingView style={styles.container} behavior="padding">
          <View
            style={{
              flex: 1,
              width: '100%',
              height: '30%',
              padding: 0,
              paddingTop: '30%',
              backgroundColor: 'white',
            }}>
            <Text style={{color: 'black', fontSize: 35, textAlign: 'center'}}>
              Medical App Test
            </Text>
          </View>
          <View style={{flex: 1, width: '80%'}}>
            <FormTextInput
              value={this.state.email}
              onChangeText={this.handleEmailChange}
              placeholder={'E-mail'}
              autoCapitalize="none"
            />
            <FormTextInput
              autoCapitalize="none"
              value={this.state.password}
              secureTextEntry={true}
              onChangeText={this.handlePasswordChange}
              placeholder={'Password'}
            />
            <Button
              label={'Log In'}
              disabled={this.state.loginButtonDisabled}
              onPress={navigate => {
                let email = this.state.email.trim();
                let password = this.state.password;

                if (!this.emailCorrect(email)) {
                  Alert.alert('Error', 'Invalid E-mail Address! Try again.');
                  return;
                }

                if (this.state.password.length < 4) {
                  Alert.alert('Error', 'Invalid password! Try again.');
                  return;
                }

                this.setState({loginButtonDisabled: true});

                fetch(ConfigData.SERVER_HOST + 'api/user/login', {
                  method: 'POST',
                  headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    email: email.toLowerCase(),
                    password: password,
                  }),
                })
                  .then(response => response.json())
                  .then(responseJson => {
                    this.setState({loginButtonDisabled: false});

                    if (responseJson.message === 'OK') {
                      AsyncStorage.setItem('login_email', email);
                      AsyncStorage.setItem('login_password', password);
                      if (responseJson.isApproved === 1) {
                        global.myDB.db.executeSql(
                          'delete from my_profile1',
                          [],
                          (tx, result) => {
                            global.myDB.db.transaction(txx => {
                              txx.executeSql(
                                'insert into my_profile1 (date, userID, gender, calorieGoal, weight, weight_date, height, age, email, name, activityLevel) values (' +
                                  "'" +
                                  responseJson.date +
                                  "'," +
                                  responseJson.user +
                                  ', ' +
                                  responseJson.gender +
                                  ', ' +
                                  responseJson.calorieGoal +
                                  ', ' +
                                  responseJson.weight +
                                  ', ' +
                                  "'" +
                                  responseJson.weight_date +
                                  "', " +
                                  responseJson.height +
                                  ', ' +
                                  responseJson.age +
                                  ', ' +
                                  "'" +
                                  responseJson.email +
                                  "', " +
                                  "'" +
                                  responseJson.name +
                                  "', " +
                                  "'" +
                                  responseJson.activityLevel +
                                  "')",
                              );
                              if (global.myprofile.gender === 0) {
                                global.myprofile.gender = 'Male';
                              } else if (global.myprofile.gender === 1) {
                                global.myprofile.gender = 'Female';
                              } else {
                                global.myprofile.gender = 'Not to say';
                              }
                            });

                            global.myprofile = responseJson;
                            global.myprofile.userID = responseJson.user;

                            if (
                              typeof global.myprofile.activityLevel ===
                              'undefined'
                            ) {
                              global.myprofile.activityLevel =
                                parseInt(Math.random() * 10000, 10) % 6;
                            }
                          },
                        );

                        this.props.navigation.navigate('Main', {name: 'OK'});
                      } else if (responseJson.isApproved === -1) {
                        Alert.alert(
                          'Error',
                          'Your account is removed now. Contact your doctor.',
                        );
                      } else {
                        Alert.alert(
                          'Error',
                          'Your account is not approved yet. Please wait for the administrator to approve.',
                        );
                      }
                    } else if (responseJson.message === 'signup in progress') {
                      AsyncStorage.setItem(
                        'login_email',
                        email.toLowerCase(),
                        () => {
                          AsyncStorage.setItem(
                            'login_password',
                            password,
                            () => {
                              this.props.navigation.navigate('SignupDetail', {
                                userID: responseJson.id,
                              });
                            },
                          );
                        },
                      );
                    } else {
                      Alert.alert(
                        'Error',
                        'User not found or invalid password',
                      );
                    }
                  })
                  .catch(error => {
                    this.setState({loginButtonDisabled: false});
                    Alert.alert('Error', 'Network error. Try again.');
                  });
              }}
            />
          </View>
          <View style={{flexDirection: 'row'}}>
            <Text
              style={{
                width: '50%',
                textAlign: 'center',
                color: 'blue',
                paddingBottom: 40,
              }}
              onPress={() => {
                this.props.navigation.navigate('Signup', {name: 'Test'});
              }}>
              Create Account
            </Text>
            <Text
              style={{
                width: '50%',
                textAlign: 'center',
                color: 'blue',
                paddingBottom: 40,
              }}
              onPress={() => {
                this.props.navigation.navigate('ForgotPassword', {
                  name: 'Test',
                });
              }}>
              Forgot Password
            </Text>
          </View>
        </KeyboardAvoidingView>
      </TouchableWithoutFeedback>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    alignItems: 'center',
    //justifyContent: "space-between"
  },
});
